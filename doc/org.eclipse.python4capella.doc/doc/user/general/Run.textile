h1. Run a Python script

This section explains how you can run your Python for Capella script either within Capella or from the command line.

Note:

If you open provided scripts, you will notice some errors in them. Those errors can be ignored. They are related to the use of EASE that allows access to Java objects with the PyDev editor.

EASE is a scripting environment for Eclipse.
It allows to create, maintain and execute script code in the context of the running Eclipse instance. Therefore such scripts may manipulate and extend the IDE itself. 

The PyDev editor only recognizes the Python language, and EASE adds a custom way to import other scripts, declare methods and variables. At runtime EASE will be used and everything will work properly.

- some **import directives from EASE** are not recognized by PyDev

!Run/error_import.png(Import error)!

- some **methods** defined in EASE modules are not recognized by PyDev

!Run/error_method1.png(Method error)!

!Run/error_method2.png(Method error)!

!Run/error_method3.png(Method error)!

- some other errors can happen when accessing **variables defined by EASE**

!Run/error_variable.png(Import variable)!

h2. Within Capella

You will need to "enable Development capabilities":EnableDevelopmentCapabilities.html if it's not already done.
 
You can now select your script and right click on it:
 - select the Run As / EASE Script menu

If your script take some arguments, you can change the launch configuration by right clicking on your script:
 - select the Run As / Run configuration menu.

This will open the launch configuration for your script and you can edit it to add parameters for instance.

!Run/Run_Configurations.png(Run Configurations with parameter)!

h2. Command line

This feature is available for Capella 1.4.1 and above.

Even if you are running in a command line, Capella needs a graphical interface and a windows manager. If you are running Python for Capella on a Linux server, make sure you have a graphical interface and a window manager installed and runnning.
You can also run your Python for Capella script from the command line:

Windows

bc. eclipsec.exe -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data .\workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*

Linux and Mac OS X

bc. ./eclipse -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data ./workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*

Note: Since Capella 5.0 the eclipse executable has been renamed to capella, you should use:

Windows

bc. capellac.exe -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data .\workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*

Linux and Mac OS X

bc. ./capella -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data ./workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*

Note: To execute a script through command line, on a remote project created with **Team for Capella**, first you need to log to the remote project using a Team for Capella client and check the "Remember me" checkbox. This will save your credentials. This way, the command line will be able to connect to the remote repository.

!Run/Team.for.Capella.png(The "Remember me" checkbox)!

Note: when an element is locked and prevent a modification, you will have a dialog when running with the graphical environment but no log when in command line.

h2. Jenkins

You can run the previous from your jenkins job. You will need to add a build step in your build configuration. Go to your build configuration in Jenkins and add a build step (or pre/post build step):

!Run/Jenkins_addBuildStep.png(Add a build step)!

If you are using Windows select the "Execute Windows batch command" menu, if you are using Linux or Mac OS X select the "Execute shell" menu.

Then for Windows and Capella below version 5.x set the command to:

bc. pushd *path to your Capella installation*
eclipsec.exe -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data .\workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*
popd

Then for Windows and Capella 5.x or above set the command to:

bc. pushd *path to your Capella installation*
capellac.exe -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data .\workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*
popd

For Linux or Mac OS X and Capella below version 5.x set the command to:

bc. cd *path to your Capella installation*
./eclipse -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data ./workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*
cd -

For Linux or Mac OS X and Capella 5.x or above set the command to:

bc. cd *path to your Capella installation*
./capella -nosplash -consolelog -application org.polarsys.capella.core.commandline.core -appid org.eclipse.python4capella.commandline -data ./workspace workspace:/Python4Capella/sample_scripts/my_script.py *arguments*
cd -
